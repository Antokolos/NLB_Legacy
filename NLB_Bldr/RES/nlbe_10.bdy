<!-- NLB Engine v. 0.1, Release 6. (c) Antokolos, 06.01.2006            -->
<!-- ****************************************************************** -->
<!-- This file was generated by the Non-Linear Book Builder Version 0.1 -->
<!-- Copyright (C) Antokolos 2003-2006					-->
<!-- E-Mail: antokolos@gmail.com                                        -->

<!doctype html public "-//w3c//dtd html 3.2//en">

<html>
	
	<head>
		<title>
			%s
		</title>
		<meta name="GENERATOR" content="Non-Linear Book Builder 0.1">
		<meta name="FORMATTER" content="Non-Linear Book Builder 0.1">
		<meta http-equiv="Content-Type" content="text/html" charset="Windows-1251">
		
<style type="text/css" title="nlb_css">

		body {background-color : #626262;
			color : #FFFFFF;
			overflow : auto}

		h1 {font-size : 28;
			font-family : "bookman old style", cursive;
			font-style : italic;
			font-weight : 900}

		h1.center {text-align : center}

		h2 {font-size : 24;
			font-family : "bookman old style", cursive;
			font-style : italic;
			font-weight : 600}

		h2.center {text-align : center}

		h3 {font-size : 20;
			font-family : "bookman old style", cursive;
			font-style : italic;
			font-weight : 400}

		h3.center {text-align : center}

		div.paragraph {text-align : justify; text-indent : 2em}

		div.center {text-align : center}

		div.mainpage {text-align : justify;
			padding-left : 1em;
			padding-right : 1em}

		span.BookLink {color : lightgreen; text-decoration : none; cursor : hand}

		input.ButSave {width : 70px;
			height : 30px;
			cursor : hand;
			font-family : "bookman old style", cursive;
			color : #FFFFFF;
			background-color : #929292;
			letter-spacing: 0.1em;
			font-size : 14;
			font-style : italic;
			font-weight : 900;
			overflow : visible}

		input.ButLoad {width : 70px;
			height : 30px;
			cursor : hand;
			font-family : "bookman old style", cursive;
			color : #FFFFFF;
			background-color : #929292;
			letter-spacing: 0.1em;
			font-size : 14;
			font-style : italic;
			font-weight : 900;
			overflow : visible}

		input.ButExit {width : 70px;
			height : 30px;
			cursor : hand;
			font-family : "bookman old style", cursive;
			color : #FFFFFF;
			background-color : #929292;
			letter-spacing: 0.1em;
			font-size : 14;
			font-style : italic;
			font-weight : 900;
			overflow : visible}

</style>
		
<script language="JavaScript">
<!-- ;

//-----------------------------------------------
// NLB's main body begins

%s

// NLB's main body ends
//-----------------------------------------------

//-----------------------------------------------
// NLB's JavaScript engine begins

var ArrPageVisitState = new Array();	      /* Array of page "visited states".
					      If page number "i" was visited, then 
					      the character at index "i" equals '1', 
					      otherwise '0'*/
var bmks_fname = "C:\\bookmarks.txt";	// The name of the bookmarks file (in other words, the save file)
var CurPage;	// Current page of the book

function InitStrVisState(iNumPages)
/*
 Parameter InitStrVisState is a total number of pages in our NLB.
 This function initializes array ArrPageVisitState with a 
 character '0', what means, that no pages were visited, except
 the startpoint page.
*/
{
	CurPage = strStartPoint;	// Current page of the book

	for (var i=0; i<iNumPages; i++)
	{
		ArrPageVisitState[i] = '0';	// No pages were visited initially
	}

      	ArrPageVisitState[strStartPoint] = '1';	// Startpoint page WAS visited!
	GoTo(strStartPoint);	// CurPage == StartPoint
}

//-----------------------------------------------

function onClickButSave()
{
   	var fso, f;
   	var ForReading = 1, ForWriting = 2;
   	var bmks_path;	// Path to the bookmarks file
   	var i;

  	try
   	{
        	bmks_path = prompt("Please enter the path to the bookmarks file (all subdirectories MUST exist!)", bmks_fname);
        	if (bmks_path)
	  	{
	  		fso = new ActiveXObject("Scripting.FileSystemObject");
		   	f = fso.OpenTextFile(bmks_path, ForWriting, true,0);
		   	for (i=0; i<ArrPageVisitState.length; i++)
		   	{
		   		f.Write(ArrPageVisitState[i]);
		   	}
		   	f.WriteLine(CurPage);
			SaveGlobalVariables(f);	// Saves global variables as strings to file f
		   	f.Close();
	           	bmks_fname = bmks_path;	// This command will execute if and only if all operations with file was successful
	  	}
	}
   	catch (e)
   	{
		alert ("Error writing file!");
   	}
}

//-----------------------------------------------

function onClickButLoad()
{
   	var fso, f;
   	var ForReading = 1, ForWriting = 2;
   	var bmks_path;	// Path to the bookmarks file

   	try
   	{
        	bmks_path = prompt("Please enter the path to the bookmarks file (all subdirectories MUST exist!)", bmks_fname);
         	if (bmks_path)
	   	{
      	   		fso = new ActiveXObject("Scripting.FileSystemObject");
		   	f = fso.OpenTextFile(bmks_path, ForReading, false,0);
		   	for (i=0; i<ArrPageVisitState.length; i++)
		   	{
		   		ArrPageVisitState[i] = f.Read(1);
		   	}
		   	CurPage = f.ReadLine();
			LoadGlobalVariables(f);	// Restores global variables from file f
		   	f.Close();
               		bmks_fname = bmks_path;	// This command will execute if and only if all operations with file was successful
               		GoTo(CurPage);
	   	}
	}
	catch (e)
   	{
		alert ("Error reading file!");
   	}
}

function onClickButExit()
{
	window.close();
}

//-----------------------------------------------

function ProceedOpinion(toGo)
/*
 Proceed to the page toGo
*/
{
       	try
	{
		ArrPageVisitState[toGo] = '1';	// toGo is visited now!
                GoTo(toGo);
                CurPage = toGo;
	}
	catch (e)
	{
		alert("Internal book error in ProceedOpinion!");
	}
}

// Beautification
function bt_Load_in()
{
	bt_Load.style.backgroundColor = "#626262";
}

function bt_Load_out()
{
	bt_Load.style.backgroundColor = "#929292";
}

function bt_Save_in()
{
	bt_Save.style.backgroundColor = "#626262";
}

function bt_Save_out()
{
	bt_Save.style.backgroundColor = "#929292";
}

function bt_Exit_in()
{
	bt_Exit.style.backgroundColor = "#626262";
}

function bt_Exit_out()
{
	bt_Exit.style.backgroundColor = "#929292";
}

function MouseOverBookLink(obj)
{
	obj.style.color = "lime";
        obj.style.textDecoration = "underline";
}

function MouseOutBookLink(obj)
{
	obj.style.color = "lightgreen";
        obj.style.textDecoration = "none";
}

//-----------------------------------------------
// Pseudorandom number generation

function randomNumber()
{
	return Math.random();
	// I've read that object Math has the random() method
	// only on UNIX machines, but it seems this 
	// information is obsolete :-)
}

//-----------------------------------------------
// KdY dice value generation

function KdY(k, y)
// k - Number of dices
// y - Maximum value of one dice (dice value range = [1, y])
{
	var iDiceResult = 0;

	for (i = 0; i < k; i++)
	{
		iDiceResult += (Math.round(randomNumber()*(y-1)) + 1);
	}

	return iDiceResult;
}

function GenerateButtonsHTML()
// Generates HTML code for all buttons (Save, Load, Exit, user defined)
{
	var Result = '';
	// Save, Load and Exit buttons
	Result += '<input type="button" value="Save" id="bt_Save" class="ButSave" onClick="onClickButSave();" onMouseOver = "bt_Save_in();" onMouseOut = "bt_Save_out();">';
	Result += '&nbsp;';
        Result += '<input type="button" value="Load" id="bt_Load" class="ButLoad" onClick="onClickButLoad();" onMouseOver = "bt_Load_in();" onMouseOut = "bt_Load_out();">';
	Result += '&nbsp;';
	Result += '<input type="button" value="Exit" id="bt_Exit" class="ButExit" onClick="onClickButExit();" onMouseOver = "bt_Exit_in();" onMouseOut = "bt_Exit_out();">';
	Result += '&nbsp;';

	// Other buttons

	Result += '<HR>';
	return Result;
}

// NLB's JavaScript engine ends
//-----------------------------------------------

// end hide -->
</script>
		
	</head>
	
	<body onLoad="InitStrVisState(iNumPagesTotal)">
		
	<div id="idMainPage" class="mainpage">
        	Book page will be here!
	</div>

	</body>
	
</html>
